public class Main {
    public static void main(String[] args) {
        double[] range = Swann(0, 1);
        double x = TheGoldenRatio(range, 0.01);
        System.out.println("Значение экстремума, найденого методом золотого сечения: " + x);
        double x1 = TheQuadraticInterpolation(1, 0.01, 0.01, 0.01);
        System.out.println("Значение экстремума, найденого методом квадратичной интерполяции: " + x1);
     }
    static double f(double x)
    {
        return x*x -2*x +Math.exp(-x);
    }
    public static double[] Swann(double x0, double t)
    {

        double[] range = new double[2];
        double xmT, x, xpT;
        double delta = 0;
        ///1
        int k = 0;
        /// 2
        xmT = f(x0 - t);
        x = f(x0);
        xpT = f(x0 + t);
        /// 3
        if (xmT >= x && x <= xpT)
        {
            range[0] = x0 - t;
            range[1] = x0 + t;
            System.out.println("Начальный интервал найден: [a0, b0] = [" + range[0] + ", " + range[1] + "]");
            return range;
        }
        if (xmT <= x && x >= xpT)
        {
            System.out.println("Функция не является унимодальной, а требуемый интервал неопределенности не может быть найден. Рекомендуется задать другую начальную точку х0.");
            System.exit(0);
        }
        /// 4
        if (xmT >= x && x >= xpT)
        {
            delta = t;
            range[0] = x0;
            x0 += t;
            k = 1;
        }
        if (xmT <= x && x <= xpT)
        {
            delta = -t;
            range[1] = x0;
            x0 -= t;
            k = 1;
        }
        while (true)
        {
            /// 5
            x = x0 + Math.pow(2, k) * delta;
            /// 6
            if (f(x) < f(x0))
            {
                if (delta == t)
                    range[0] = x0;
                if (delta == -t)
                    range[1] = x0;
                x0 = x;
                k++;
                continue;
            }
            if (f(x) >= f(x0))
            {
                if (delta == t)
                    range[1] = x;
                if (delta == -t)
                    range[0] = x;
                break;
            }
        }
        System.out.println("Начальный интервал, найденный методом Свенна: [" + range[0] + ", " + range[1] + "]");
        return range;
    }
    public static double TheGoldenRatio(double[] range, double l)
    {
        /// 3
        double y, z;
        double oldY = range[0] + 0.38196 * (range[1] - range[0]);
        double oldZ = range[0] + range[1] - oldY;
        while (true)
        {
            /// 4
            double fy = f(oldY);
            double fz = f(oldZ);
            /// 5
            if (fy <= fz)
            {
                range[0] = range[0];
                range[1] = oldZ;
                y = range[0] + range[1] - oldY;
                z = oldY;
            }
            else
            {
                range[0] = oldY;
                range[1] = range[1];
                y = oldZ;
                z = range[0] + range[1] - oldZ;
            }
            /// 6
            if (Math.abs(range[0] - range[1]) < l)
            {
                return (range[0] + range[1]) / 2;
            }
            else
            {
                oldY = y;
                oldZ = z;
            }
        }
    }
    public static double TheQuadraticInterpolation(double x1, double t, double e1, double e2)
    {
        double[][] value = new double[3][2];
        value[0][0] = x1;
        /// value = {{x1, f1},
        ///          {x2, f2},
        ///          {x3, f3}};
        double[] min = new double[2];
        double[] s = new double[2];
        boolean flag = true;
        while (true)
        {
            if (flag)
            {
                /// 2
                value[1][0] = value[0][0] + t;
                /// 3
                value[0][ 1] = f(value[0][ 0]);
                value[1][ 1] = f(value[1][ 0]);
                /// 4
                if (value[0][ 1] > value[1][ 1])
                    value[2][ 0] = value[0][ 0] + 2 * t;
                else
                    value[2][0] = value[0][0] - t;
                ///5
                value[2][ 1] = f(value[2][ 0]);
            }
            /// 6
            min[0] = Math.min(Math.min(value[0][0], value[1][0]), value[2][0]);
            min[1] = f(min[0]);
            /// 7
            if (Double.compare((2 * ((value[1][ 0] - value[2][ 0]) * value[0][ 1] + (value[2][ 0] - value[0][ 0]) * value[1][ 1] + (value[0][ 0] - value[1][ 0]) * value[2][ 1])), 0) == 0)
            {
                value[0][ 0] = min[0];
                flag = true;
                continue;
            }
            s[0] = (1 * (value[1][ 0] * value[1][ 0] - value[2][ 0] * value[2][ 0]) * value[0][ 1] + (value[2][ 0] * value[2][ 0] - value[0][ 0] * value[0][ 0]) * value[1][ 1] + (value[0][ 0] * value[0][ 0] - value[1][ 0] * value[1][ 0]) * value[2][ 1]) / (2 * ((value[1][ 0] - value[2][ 0]) * value[0][ 1] + (value[2][ 0] - value[0][ 0]) * value[1][ 1] + (value[0][ 0] - value[1][ 0]) * value[2][ 1]));
            s[1] = f(s[0]);
            /// 8
            if (Double.compare(Math.abs((min[1] - s[1]) / s[1]),e1) < 0 && Double.compare(Math.abs((min[0] - s[0]) / s[0]), e2) < 0)
            {
                return s[0];
            }
            value[0][0] = s[0];
            if ((Double.compare(s[0], value[0][ 0]) < 0 && Double.compare(s[0], value[2][ 0]) < 0) || (Double.compare(s[0], value[0][ 0]) < 0 && Double.compare(s[0], value[2][ 0]) > 0))
            {
                if(min[1] < s[1]){
                    s[0] = min[0];
                    s[1] = min[1];
                }
                Sort(value);
                if (value[0][ 1] <= s[1] && s[1] <= value[1][ 1])
                {
                    value[2][ 0] = value[1][ 0];
                    value[2][ 1] = value[1][ 1];
                }
                if (value[1][ 1] <= s[1] && s[1] <= value[2][ 1])
                {
                    value[0][ 0] = value[1][ 0];
                    value[0][ 1] = value[1][ 1];
                }
                value[1][ 0] = s[0];
                value[1][ 1] = s[1];
                flag = false;
            }
            else
            {
                value[0][ 0] = s[0];
                flag = true;
            }
        }
    }
    static void Sort(double[][] value)
    {
        double temp;
        if (value[0][1] > value[1][1])
        {
            temp = value[0][0];
            value[0][0] = value[1][0];
            value[1][0] = temp;
            temp = value[0][1];
            value[0][1] = value[1][1];
            value[1][1] = temp;
        }
        if (value[1][ 1] > value[2][ 1])
        {
            temp = value[1][0];
            value[1][0] = value[2][0];
            value[2][0] = temp;
            temp = value[1][1];
            value[1][1] = value[2][1];
            value[2][1] = temp;
        }
        if (value[0][ 1] > value[1][ 1])
        {
            temp = value[0][0];
            value[0][0] = value[1][0];
            value[1][0] = temp;
            temp = value[0][1];
            value[0][1] = value[1][1];
            value[1][1] = temp;
        }
    }
}
